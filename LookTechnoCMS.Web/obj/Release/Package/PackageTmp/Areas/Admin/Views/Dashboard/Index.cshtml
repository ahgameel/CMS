@using Microsoft.Web.Helpers
@model LookTechnoCMS.Web.Models.AnalyticsSummary




<h3 class="page-title">
    Dashboard <small>statistics and more</small>
</h3>
<!-- Add Google Analytics authorization button -->
<button id="authorize-button" style="visibility: hidden">
    Authorize Analytics
</button>

    
    <div id="embed-api-auth-container"></div>

    <div class="btn-group" id="view-selector-container"></div>






<div class="row">
    <div class="col-md-6 col-sm-6">
        <!-- BEGIN PORTLET-->
        <div class="portlet solid bordered light-grey">
            <div class="portlet-title">
                <div class="caption"><i class="icon-bar-chart"></i>Site Visits</div>

            </div>
            <div class="portlet-body">

                <div id="site_statistics_content" class="display-none" style="display: block;">
                    <div id="chart-container"></div>
                </div>
            </div>
        </div>
        <!-- END PORTLET-->
    </div>
    <div class="col-md-6 col-sm-6">
        <!-- BEGIN REGIONAL STATS PORTLET-->
        <div class="portlet">
            <div class="portlet-title">
                <div class="caption"><i class="icon-globe"></i>Top Countries by Sessions</div>

            </div>
            <div class="portlet-body">

                <div id="region_statistics_content" class="display-none" style="display: block;">
                    <div id="chart-1-container"></div>
                </div>
            </div>
        </div>
        <!-- END REGIONAL STATS PORTLET-->
    </div>
</div>


<div class="row">
    <div class="col-md-6 col-sm-6">
        <!-- BEGIN PORTLET-->
        <div class="portlet solid light-grey bordered">
            <div class="portlet-title">
                <div class="caption"><i class="icon-bullhorn"></i>Top Browsers (past 7 days)</div>

            </div>
            <div class="portlet-body">

                <div id="site_activities_content" class="display-none" style="display: block;">
                    <div id="main-chart-container"></div>
                </div>
            </div>
        </div>
        <!-- END PORTLET-->
        <!-- BEGIN PORTLET-->
        <!-- END PORTLET-->
    </div>
    <div class="col-md-6 col-sm-6">
        <!-- BEGIN PORTLET-->
        <div class="portlet solid light-grey bordered">
            <div class="portlet-title">
                <div class="caption">Sessions by Browser</div>

            </div>
            <div class="portlet-body">

                <div id="site_activities_content" class="display-none" style="display: block;">
                    <div id="breakdown-chart-container"></div>
                </div>
            </div>
        </div>
        <!-- END PORTLET-->
        <!-- BEGIN PORTLET-->
        <!-- END PORTLET-->
    </div>
</div>
<div class="row">
    <div class="col-md-6 col-sm-6">
        <!-- BEGIN PORTLET-->
        <div class="portlet solid light-grey bordered">
            <div class="portlet-title">
                <div class="caption">Page Views</div>

            </div>
            <div class="portlet-body">

                <div id="site_activities_content" class="display-none" style="display: block;">
                    <div id="pageview-chart-container"></div>
                </div>
            </div>
        </div>
        <!-- END PORTLET-->
        <!-- BEGIN PORTLET-->
        <!-- END PORTLET-->
    </div>
</div>

<script>
    (function (w, d, s, g, js, fs) {
        g = w.gapi || (w.gapi = {}); g.analytics = { q: [], ready: function (f) { this.q.push(f); } };
        js = d.createElement(s); fs = d.getElementsByTagName(s)[0];
        js.src = 'https://apis.google.com/js/platform.js';
        fs.parentNode.insertBefore(js, fs); js.onload = function () { g.load('analytics'); };
    }(window, document, 'script'));
</script>
<script>

    gapi.analytics.ready(function () {

        /**
         * Authorize the user immediately if the user has already granted access.
         * If no access has been created, render an authorize button inside the
         * element with the ID "embed-api-auth-container".
         */
        gapi.analytics.auth.authorize({
            container: 'embed-api-auth-container',
            clientid: '991677176944-oubbnj467d8622dokpig5bres8qr4k9f.apps.googleusercontent.com',
            
        });


        /**
         * Create a new ViewSelector instance to be rendered inside of an
         * element with the id "view-selector-container".
         */
        var viewSelector = new gapi.analytics.ViewSelector({
            container: 'view-selector-container'
        });
        /**
       * Create a ViewSelector for the second view to be rendered inside of an
       * element with the id "view-selector-2-container".
       */
        var viewSelector2 = new gapi.analytics.ViewSelector({
            container: 'view-selector-container'
        });

        // Render the view selector to the page.
        viewSelector.execute();
       // viewSelector2.execute();

        /**
         * Create a new DataChart instance with the given query parameters
         * and Google chart options. It will be rendered inside an element
         * with the id "chart-container".
         */
        var dataChart = new gapi.analytics.googleCharts.DataChart({
            query: {
                metrics: 'ga:sessions',
                dimensions: 'ga:date',
                'start-date': '30daysAgo',
                'end-date': 'yesterday'
            },
            chart: {
                container: 'chart-container',
                type: 'LINE',
                options: {
                    width: '100%'
                }
            }
        });

        /**
        * Create the first DataChart for top countries over the past 30 days.
        * It will be rendered inside an element with the id "chart-1-container".
        */
        var dataChart1 = new gapi.analytics.googleCharts.DataChart({
            query: {
                metrics: 'ga:sessions',
                dimensions: 'ga:country',
                'start-date': '30daysAgo',
                'end-date': 'yesterday',
                'max-results': 6,
                sort: '-ga:sessions'
            },
            chart: {
                container: 'chart-1-container',
                type: 'PIE',
                options: {
                    width: '100%',
                    pieHole: 4 / 9
                }
            }
        });

        viewSelector.on('change', function (ids) {
            dataChart1.set({ query: { ids: ids } }).execute();
        });
       
        /**
         * Render the dataChart on the page whenever a new view is selected.
         */
        viewSelector.on('change', function (ids) {
            dataChart.set({ query: { ids: ids } }).execute();
        });





        var mainChart = new gapi.analytics.googleCharts.DataChart({
            query: {
                'dimensions': 'ga:browser',
                'metrics': 'ga:sessions',
                'sort': '-ga:sessions',
                'max-results': '6'
            },
            chart: {
                type: 'TABLE',
                container: 'main-chart-container',
                options: {
                    width: '100%'
                }
            }
        });


        /**
         * Create a timeline chart showing sessions over time for the browser the
         * user selected in the main chart.
         */
        var breakdownChart = new gapi.analytics.googleCharts.DataChart({
            query: {
                'dimensions': 'ga:date',
                'metrics': 'ga:sessions',
                'start-date': '7daysAgo',
                'end-date': 'yesterday'
            },
            chart: {
                type: 'LINE',
                container: 'breakdown-chart-container',
                options: {
                    width: '100%'
                }
            }
        });

        //var pageviewChart = new gapi.analytics.googleCharts.DataChart({
        //    query: {
        //        ga:'146240963',
        //        dimensions: 'ga:pagePath',
        //        metrics: 'ga:pageviews',
        //        'start-date': '7daysAgo',
        //        'end-date': 'yesterday'
        //    },
        //    chart: {
        //        type: 'LINE',
        //        container: 'pageview-chart-container',
        //        options: {
        //            width: '100%'
        //        }
        //    }
        //});
        //pageviewChart.execute();
        /**
         * Store a refernce to the row click listener variable so it can be
         * removed later to prevent leaking memory when the chart instance is
         * replaced.
         */
        var mainChartRowClickListener;


        /**
         * Update both charts whenever the selected view changes.
         */
        viewSelector.on('change', function (ids) {
            var options = { query: { ids: ids } };

            // Clean up any event listeners registered on the main chart before
            // rendering a new one.
            if (mainChartRowClickListener) {
                google.visualization.events.removeListener(mainChartRowClickListener);
            }

            mainChart.set(options).execute();
            breakdownChart.set(options);

            // Only render the breakdown chart if a browser filter has been set.
            if (breakdownChart.get().query.filters) breakdownChart.execute();
        });


        /**
         * Each time the main chart is rendered, add an event listener to it so
         * that when the user clicks on a row, the line chart is updated with
         * the data from the browser in the clicked row.
         */
        mainChart.on('success', function (response) {

            var chart = response.chart;
            var dataTable = response.dataTable;

            // Store a reference to this listener so it can be cleaned up later.
            mainChartRowClickListener = google.visualization.events
                .addListener(chart, 'select', function (event) {

                    // When you unselect a row, the "select" event still fires
                    // but the selection is empty. Ignore that case.
                    if (!chart.getSelection().length) return;

                    var row = chart.getSelection()[0].row;
                    var browser = dataTable.getValue(row, 0);
                    var options = {
                        query: {
                            filters: 'ga:browser==' + browser
                        },
                        chart: {
                            options: {
                                title: browser
                            }
                        }
                    };

                    breakdownChart.set(options).execute();
                });
        });
    });
</script>


